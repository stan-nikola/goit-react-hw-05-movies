{"version":3,"file":"static/js/598.b2947aac.chunk.js","mappings":"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","sources":["components/MovieListRender/MovieListRender.styled.js","components/MovieListRender/MovieListRender.js","constants/loadSpinner.js","pages/SearchMovies/SearchMovies.styled.js","pages/SearchMovies/SearchMovies.js","services/themoviedbApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieHomeTitle = styled.h2`\n  color: white;\n  text-transform: uppercase;\n  text-align: center;\n  margin-bottom: 30px;\n`;\n\nexport const MovieList = styled.li`\n  list-style: none;\n  width: 150px;\n  background-color: #d4cedf4a;\n  gap: 20px;\n  border-radius: 4px;\n  overflow: hidden;\n  transition: scale 250ms linear, box-shadow 250ms linear;\n\n  &:hover,\n  &:focus {\n    scale: 1.03;\n    box-shadow: 23px -36px 55px -17px rgba(255, 107, 8, 0.76);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const MovieTitle = styled.p`\n  text-align: center;\n  padding: 5px 7px;\n  color: white;\n  font-size: 15px;\n  font-weight: 700;\n`;\n","import { useLocation } from 'react-router-dom';\n\nimport { Box } from 'components/Box/Box';\nimport { IMAGE_PATH } from 'services/themoviedbApi';\nimport {\n  MovieList,\n  MovieTitle,\n  MovieLink,\n  MovieHomeTitle,\n} from './MovieListRender.styled';\n\nexport const MovieListRender = ({ moviesArr, title }) => {\n  const location = useLocation();\n\n  if (moviesArr.results === []) {\n    return;\n  }\n\n  return (\n    <>\n      {title && <MovieHomeTitle>{title}</MovieHomeTitle>}\n      <Box\n        as=\"ul\"\n        padding={0}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        gridGap={20}\n      >\n        {moviesArr.map(({ id, original_title, poster_path }) => (\n          <MovieList key={id}>\n            <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={IMAGE_PATH + poster_path}\n                alt={original_title}\n                width={150}\n                height={220}\n              />\n              <MovieTitle>{original_title}</MovieTitle>\n            </MovieLink>\n          </MovieList>\n        ))}\n      </Box>\n    </>\n  );\n};\n","export const override = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%,-50%)',\n};\n","import styled from 'styled-components';\n\nexport const SearchTitle = styled.h2`\n  text-transform: uppercase;\n  margin-bottom: 30px;\n  color: white;\n`;\n\nexport const SearchInput = styled.input`\n  min-width: 300px;\n  height: 30px;\n  background-color: transparent;\n  border: none;\n  border-bottom: 2px solid white;\n  color: white;\n  transition: border-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    border-color: red;\n  }\n`;\nexport const SearchForm = styled.form`\n  position: relative;\n  margin-bottom: 30px;\n`;\nexport const SearchButton = styled.button`\n  position: absolute;\n  top: 50%;\n  right: -10px;\n  transform: translateY(-50%);\n\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 5px 10px;\n  color: white;\n  transition: color 250ms linear;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n  &:hover,\n  &:focus {\n    color: red;\n  }\n`;\n\nexport const SearchNotification = styled.p`\n  color: white;\n  span {\n    font-weight: 700;\n    text-transform: capitalize;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nimport { Box } from 'components/Box/Box';\nimport { MovieListRender } from 'components/MovieListRender/MovieListRender';\nimport { fetchMovieByName } from '../../services/themoviedbApi';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport {\n  SearchButton,\n  SearchForm,\n  SearchInput,\n  SearchTitle,\n  SearchNotification,\n} from './SearchMovies.styled';\nimport { override } from 'constants/loadSpinner';\n\nconst SearchMovies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState('');\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const savedQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!savedQuery) {\n      setSearchMovies([]);\n\n      return;\n    }\n    fetchMovieByName(savedQuery).then(resp => setSearchMovies(resp.results));\n  }, [savedQuery]);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [searchMovies]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setLoading(true);\n    if (!query.trim()) {\n      alert('No movie');\n      setQuery('');\n      setLoading(false);\n      return;\n    }\n    setSearchParams({ query: query.trim() });\n    setQuery('');\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <SearchTitle>movie search</SearchTitle>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchInput\n          onChange={e => {\n            setQuery(e.currentTarget.value);\n          }}\n          value={query}\n          type=\"text\"\n        ></SearchInput>\n        <SearchButton type=\"submit\">\n          <AiOutlineSearch />\n        </SearchButton>\n      </SearchForm>\n      <MovieListRender moviesArr={searchMovies} />\n      {!savedQuery && (\n        <SearchNotification>Enter movie title to search</SearchNotification>\n      )}\n      {searchMovies.length <= 0 && savedQuery && (\n        <SearchNotification>\n          <span> {savedQuery}</span> movie not found\n        </SearchNotification>\n      )}\n      <ScaleLoader\n        color={'red'}\n        loading={loading}\n        cssOverride={override}\n        size={500}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    </Box>\n  );\n};\n\nexport default SearchMovies;\n","export const API_KEY = '62f46feb65c2319fb0db62c2c080ca35';\nexport const BASE_URL = 'https://api.themoviedb.org';\nexport const FETCH_BY_NAME_PATH = 'https://api.themoviedb.org/3/search/movie';\nexport const IMAGE_PATH = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}`\n    );\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieInfo = async (movieId, info) => {\n  let response = {};\n  try {\n    if (info === '') {\n      response = await fetch(\n        `${BASE_URL}/3/movie/${movieId}?api_key=${API_KEY}`\n      );\n    } else {\n      response = await fetch(\n        `${BASE_URL}/3/movie/${movieId}/${info}?api_key=${API_KEY}`\n      );\n    }\n\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieByName = async query => {\n  try {\n    const response = await fetch(\n      `${FETCH_BY_NAME_PATH}?api_key=${API_KEY}&query=${query}`\n    );\n\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["MovieHomeTitle","styled","MovieList","MovieLink","Link","MovieTitle","MovieListRender","moviesArr","title","location","useLocation","results","Box","as","padding","display","flexWrap","justifyContent","gridGap","map","id","original_title","poster_path","to","state","from","src","IMAGE_PATH","alt","width","height","override","position","top","left","transform","SearchTitle","SearchInput","SearchForm","SearchButton","SearchNotification","useSearchParams","searchParams","setSearchParams","useState","query","setQuery","searchMovies","setSearchMovies","loading","setLoading","savedQuery","get","useEffect","fetchMovieByName","then","resp","flexDirection","alignItems","onSubmit","e","preventDefault","trim","alert","onChange","currentTarget","value","type","length","color","cssOverride","size","API_KEY","BASE_URL","fetchTrendingMovies","fetch","response","data","json","console","log","fetchMovieInfo","movieId","info"],"sourceRoot":""}